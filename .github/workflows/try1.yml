import itertools
#defines the game map
#grid = [[0, 0, 0],
#        [0, 0, 0],
#        [0, 0, 0]]
#display the game map
#for count, row in enumerate(grid):
#    print(count, row)
#player enters x or o and location to put it
#set that value in the grid
#function to display the game map with every change
#all together in one function
def win(current_game):

    def all_same(a_list):
        if a_list.count(a_list[0]) == len(a_list) and a_list[0] != 0:
            return True
        else:
            return False
        #could also put the print statement in this function

    #horizontal
    for row in grid:
        if all_same(row):
            print(f"Player {row[0]} is the winner horizontally!")
            return True
    #diagonal winners the "other" way: (2,0), (1,1), and (0, 2)
    diags = []
    for col, row in enumerate(reversed(range(len(grid)))):
        diags.append(grid[row][col])
    if all_same(diags):
        print(f"Player {diags[0]} is the winner diagonally (/)!")
        return True
    #diagonal winners the "easy" way: (0,0), (1,1), and (2,2)
    diags = []
    for index1 in range(len(grid)):
        diags.append(grid[index1][index1])
    if all_same(diags):
        print(f"Player {diags[0]} is the winner diagonally (\\)!")
        return True

    #vertical winner
    for col in range(len(grid)):
        check = []
        for row in grid:
            #print(row[0])
            check.append(row[col])
        if all_same(check):
            print(f"Player {check[0]} is the winner vertically (|)!")
            return True
    #tie game
    check = []
    for row in grid:
        if (row.count(0) > 0):
            check.append(row)
    if len(check) == 0:
        print("No more spaces. Tie game!")
        return True
    #the return False below used to be basically, "nobody won." Now I'm not sure what it does...
    return False

def game_board(grid_map, player=0, row=0, column=0, just_display=False):
#need a way to check if player gets messed up: either if player != 0 or a Boolean variable
    try:
        if grid_map[row][column] != 0:
            print("This position is occupied. Choose another.")
            return grid_map, False
        #I think this is called list comprehension when you write out something and use it on the same line
        #this prints a column/row "tracker"
        print("   " + "  ".join([str(i) for i in range(game_size)]))
        if not just_display:
            grid_map[row][column] = player
        for count, row in enumerate(grid_map):
            print(count, row)
        return grid_map, True
    except IndexError as e:
        print("Error: make sure you input row/column as 0, 1, or 2.", e)
        return grid_map, False
    except Exception as e:
        print("Something went very wrong!", e)
        return grid_map, False

play = True
players = [1,2]
while play:
#any size grid, aka making the game size dynamic
    game_size = int(input("What size game of tic tac toe? "))
    grid = [[0 for i in range(game_size)] for i in range(game_size)]
#    grid = [[0,0,0],
#            [0,0,0],
#            [0,0,0]]

    game_won = False
    game, _ = game_board(grid, just_display=True)
    player_choice = itertools.cycle([1,2])
    while not game_won:
        current_player = next(player_choice)
        print(f"Current Player: {current_player}")
        played = False

        while not played:
            column_choice = int(input("What column do you want to play? (0, 1, 2): "))
            row_choice = int(input("What row do you want to play? (0, 1, 2): "))
            game, played = game_board(game, current_player, row_choice, column_choice)
        if win(grid):
            game_won = True
            again = input("The game is over. Would you like to play again? (y/n) ")
            if again.lower() == "y":
                print("Restarting...")
            else:
                print("Ok. Bye!")
                play = False
